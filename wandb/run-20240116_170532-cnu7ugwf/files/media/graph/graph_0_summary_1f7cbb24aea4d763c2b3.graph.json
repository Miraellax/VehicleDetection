{"format": "torch", "nodes": [{"name": "transform", "id": 2626649459008, "class_name": "GeneralizedRCNNTransform(\n    Normalize(mean=[0.48235, 0.45882, 0.40784], std=[0.00392156862745098, 0.00392156862745098, 0.00392156862745098])\n    Resize(min_size=(300,), max_size=300, mode='bilinear')\n)", "parameters": [], "output_shape": [[], []], "num_parameters": []}, {"name": "backbone", "id": 2626524148400, "class_name": "SSDFeatureExtractorVGG(\n  (features): Sequential(\n    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (1): ReLU(inplace=True)\n    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (3): ReLU(inplace=True)\n    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (6): ReLU(inplace=True)\n    (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (8): ReLU(inplace=True)\n    (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (11): ReLU(inplace=True)\n    (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (13): ReLU(inplace=True)\n    (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (15): ReLU(inplace=True)\n    (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=True)\n    (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (18): ReLU(inplace=True)\n    (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (20): ReLU(inplace=True)\n    (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (22): ReLU(inplace=True)\n  )\n  (extra): ModuleList(\n    (0): Sequential(\n      (0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n      (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (2): ReLU(inplace=True)\n      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (4): ReLU(inplace=True)\n      (5): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (6): ReLU(inplace=True)\n      (7): Sequential(\n        (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)\n        (1): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6))\n        (2): ReLU(inplace=True)\n        (3): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1))\n        (4): ReLU(inplace=True)\n      )\n    )\n    (1): Sequential(\n      (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))\n      (1): ReLU(inplace=True)\n      (2): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))\n      (3): ReLU(inplace=True)\n    )\n    (2): Sequential(\n      (0): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1))\n      (1): ReLU(inplace=True)\n      (2): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))\n      (3): ReLU(inplace=True)\n    )\n    (3-4): 2 x Sequential(\n      (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))\n      (1): ReLU(inplace=True)\n      (2): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1))\n      (3): ReLU(inplace=True)\n    )\n  )\n)", "parameters": [["scale_weight", [512]], ["features.0.weight", [64, 3, 3, 3]], ["features.0.bias", [64]], ["features.2.weight", [64, 64, 3, 3]], ["features.2.bias", [64]], ["features.5.weight", [128, 64, 3, 3]], ["features.5.bias", [128]], ["features.7.weight", [128, 128, 3, 3]], ["features.7.bias", [128]], ["features.10.weight", [256, 128, 3, 3]], ["features.10.bias", [256]], ["features.12.weight", [256, 256, 3, 3]], ["features.12.bias", [256]], ["features.14.weight", [256, 256, 3, 3]], ["features.14.bias", [256]], ["features.17.weight", [512, 256, 3, 3]], ["features.17.bias", [512]], ["features.19.weight", [512, 512, 3, 3]], ["features.19.bias", [512]], ["features.21.weight", [512, 512, 3, 3]], ["features.21.bias", [512]], ["extra.0.1.weight", [512, 512, 3, 3]], ["extra.0.1.bias", [512]], ["extra.0.3.weight", [512, 512, 3, 3]], ["extra.0.3.bias", [512]], ["extra.0.5.weight", [512, 512, 3, 3]], ["extra.0.5.bias", [512]], ["extra.0.7.1.weight", [1024, 512, 3, 3]], ["extra.0.7.1.bias", [1024]], ["extra.0.7.3.weight", [1024, 1024, 1, 1]], ["extra.0.7.3.bias", [1024]], ["extra.1.0.weight", [256, 1024, 1, 1]], ["extra.1.0.bias", [256]], ["extra.1.2.weight", [512, 256, 3, 3]], ["extra.1.2.bias", [512]], ["extra.2.0.weight", [128, 512, 1, 1]], ["extra.2.0.bias", [128]], ["extra.2.2.weight", [256, 128, 3, 3]], ["extra.2.2.bias", [256]], ["extra.3.0.weight", [128, 256, 1, 1]], ["extra.3.0.bias", [128]], ["extra.3.2.weight", [256, 128, 3, 3]], ["extra.3.2.bias", [256]], ["extra.4.0.weight", [128, 256, 1, 1]], ["extra.4.0.bias", [128]], ["extra.4.2.weight", [256, 128, 3, 3]], ["extra.4.2.bias", [256]]], "output_shape": [[[[0]], [[0]], [[0]], [[0]], [[0]], [[0]]]], "num_parameters": [512, 1728, 64, 36864, 64, 73728, 128, 147456, 128, 294912, 256, 589824, 256, 589824, 256, 1179648, 512, 2359296, 512, 2359296, 512, 2359296, 512, 2359296, 512, 2359296, 512, 4718592, 1024, 1048576, 1024, 262144, 256, 1179648, 512, 65536, 128, 294912, 256, 32768, 128, 294912, 256, 32768, 128, 294912, 256]}, {"name": "head", "id": 2626608847840, "class_name": "SSDHead(\n  (classification_head): SSDClassificationHead(\n    (module_list): ModuleList(\n      (0): Conv2d(512, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): Conv2d(1024, 30, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (2): Conv2d(512, 30, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (3): Conv2d(256, 30, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (4-5): 2 x Conv2d(256, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    )\n  )\n  (regression_head): SSDRegressionHead(\n    (module_list): ModuleList(\n      (0): Conv2d(512, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): Conv2d(1024, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (2): Conv2d(512, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (3): Conv2d(256, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (4-5): 2 x Conv2d(256, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    )\n  )\n)", "parameters": [["classification_head.module_list.0.weight", [20, 512, 3, 3]], ["classification_head.module_list.0.bias", [20]], ["classification_head.module_list.1.weight", [30, 1024, 3, 3]], ["classification_head.module_list.1.bias", [30]], ["classification_head.module_list.2.weight", [30, 512, 3, 3]], ["classification_head.module_list.2.bias", [30]], ["classification_head.module_list.3.weight", [30, 256, 3, 3]], ["classification_head.module_list.3.bias", [30]], ["classification_head.module_list.4.weight", [20, 256, 3, 3]], ["classification_head.module_list.4.bias", [20]], ["classification_head.module_list.5.weight", [20, 256, 3, 3]], ["classification_head.module_list.5.bias", [20]], ["regression_head.module_list.0.weight", [16, 512, 3, 3]], ["regression_head.module_list.0.bias", [16]], ["regression_head.module_list.1.weight", [24, 1024, 3, 3]], ["regression_head.module_list.1.bias", [24]], ["regression_head.module_list.2.weight", [24, 512, 3, 3]], ["regression_head.module_list.2.bias", [24]], ["regression_head.module_list.3.weight", [24, 256, 3, 3]], ["regression_head.module_list.3.bias", [24]], ["regression_head.module_list.4.weight", [16, 256, 3, 3]], ["regression_head.module_list.4.bias", [16]], ["regression_head.module_list.5.weight", [16, 256, 3, 3]], ["regression_head.module_list.5.bias", [16]]], "output_shape": [[[[0], 0, [0], [0], [0], [0], [0], [0], 0, 0, [0], 0, [0], 0, [0]], [[0], [0], 0, 0, 0, 0, 0, 0, [0], 0]]], "num_parameters": [92160, 20, 276480, 30, 138240, 30, 69120, 30, 46080, 20, 46080, 20, 73728, 16, 221184, 24, 110592, 24, 55296, 24, 36864, 16, 36864, 16]}, {"name": "anchor_generator", "id": 2628432698576, "class_name": "DefaultBoxGenerator(aspect_ratios=[[2], [2, 3], [2, 3], [2, 3], [2], [2]], clip=True, scales=[0.07, 0.15, 0.33, 0.51, 0.69, 0.87, 1.05], steps=[8, 16, 32, 64, 100, 300])", "parameters": [], "output_shape": [[[8732, 4]]], "num_parameters": []}], "edges": []}